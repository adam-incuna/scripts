#!/bin/bash

##### venv-launcher
# Open a virtual environment and cd to the appropriate directory.
# If the environment doesn't exist, create it; same with the directory.
# Does magic like running .env/env.sh files if they exist.
# Needs to be run with 'source', otherwise it doesn't work properly;
# this means its variables have to be unset when it's done.

##### Usage:
#     source [path-to]/venv-launcher $name_of_project
# Best used with the following in your ~/.bash_aliases file:
#     alias venv="source [path-to]/venv-launcher"
#     alias dv="deactivate; cd ~/[path-to-your-projects-directory]"

source virtualenvwrapper.sh

# Probably your home directory, unless your work and virtual environments live elsewhere.
VENV_BASEDIR="$HOME"
# Where all your projects go.
VENV_WORKDIR="$VENV_BASEDIR/Projects"
# The name of the virtualenv itself.
VENVNAME="env-$1"
# The active directory we'll be creating and/or using.
VENV_PROJECTDIR="$VENV_WORKDIR/$1/"

# Track the user's choice of whether to make a new virtualenv.
# This variable also effectively tells us if the virtualenv exists at all.
temp_create="y"

# Check if the environment exists, and offer to create it if not.
if [[ ! -d "$VENV_BASEDIR/Envs/$VENVNAME/" ]]; then
	# Invite the user to quit out now if they mistyped.
	# Defaults to doing so unless they explicitly specify otherwise.
	echo "The virtual environment $VENVNAME does not exist."
	echo -n "Would you like to create it? (Y/n) "
	read temp_create

	if [[ $temp_create != "n" && $temp_create != "N" ]]; then
		# Time to make a new virtualenv!

		# Create a project directory.
		if [[ ! -d $VENV_PROJECTDIR ]]; then
			echo "Creating $VENV_PROJECTDIR for this project"
			mkdir $VENV_PROJECTDIR
		fi

		# Ensure that the DumpingGround directory exists.
		if [[ ! -d $VENV_WORKDIR/DumpingGround ]]; then
			echo "Creating $VENV_WORKDIR/DumpingGround to store additional files"
			mkdir $VENV_WORKDIR/DumpingGround
		fi

		# Create a directory in DumpingGround for this project.
		if [[ ! -d $VENV_WORKDIR/DumpingGround/$1 ]]; then
			echo "Creating $VENV_WORKDIR/DumpingGround/$1 to store additional files for this project"
			mkdir $VENV_WORKDIR/DumpingGround/$1
		fi

		# Ask for a Python version.
		# Default to Python 3 unless the user explicitly refuses.
		temp_python="y"
		echo "----------------------------------------------"
		echo -n "Would you like to use Python 3? (Y/n) "
		read temp_python
		VENV_PYTHONVER=`which python3`
		if [[ $temp_python == "n" || $temp_python == "N" ]]; then
			echo "Using Python 2."
			VENV_PYTHONVER=`which python2`
		else
			echo "Using Python 3."
		fi

		# Create the environment with the appropriate directory and Python settings.
		mkvirtualenv $VENVNAME -a $VENV_PROJECTDIR -p $VENV_PYTHONVER

		# Optionally clone the Git repository into $VENV_PROJECTDIR (via SSH to Github).
		# Defaults to doing so unless the user explicitly says not to.
		temp_clone="y"
		echo "----------------------------------------------"
		echo -n "Would you like to clone the Git repository git@github.com:incuna/$1.git into the project directory? (Y/n)"
		read temp_clone
		if [[ $temp_clone != "n" && $temp_clone != "N" ]]; then
			git clone "git@github.com:incuna/$1.git" $VENV_PROJECTDIR
		fi
	fi
fi

# The virtualenv now (probably) exists, one way or another!
# Activate and switch to the virtual environment.
if [[ $temp_create != "n" && $temp_create != "N" ]]; then

	# If we're already in a virtual environment, deactivate.
	if [[ "$(type deactivate)" =~ "function" ]]; then
		echo "Deactivating existing virtualenv..."
		deactivate
	fi

	workon $VENVNAME
fi

# Clean up variables that might be left in the environment (since this is run using source).
unset VENV_BASEDIR
unset VENV_WORKDIR
unset VENV_PYTHONVER
# unset VENV_PROJECTDIR
# ^ this one's actually convenient for making your shell prompt concise;
# go ahead and uncomment if you don't like it :)
unset VENVNAME
unset temp_python
unset temp_create
unset temp_clone
